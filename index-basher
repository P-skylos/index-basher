#!/usr/bin/env bash


db=0
err() {
	if (( $db )); then
		printf "$1" 1>&2
		fi
	}

#accessible vars
path_prefix=""
now_date_time=(`date '+%Y-%m-%d %H:%M'`)


#default config
card="<a class="card_link" href="{{file}}"> {{file}} </a></br>"
doc_preamble="<!doctype html><head><title>my cool site</title></head><body>"
doc_postamble="</body>"
ignore="index.html"
protected="false"

fetch_config(){
	local block=$(awk "/\["$1"\]/,/\[end\]/" .config) #pull the block with regex
	if [[ $block != "" ]]; then
		err "looking for $1 found ${block}"
		echo "${block}" | sed -e "s/^\[.*\]//" -e "s/\[end\]//" -e "s/\[\\\.*\]//"
		#if the block exists truncate the delimeters, remove \ used for escaping [\end] or [\name]
	else
		err "defaulting $1 to $2\n"
		echo "$2" #if the block doesnt exist give the default value provided
	fi
}

fill_template(){ #text #pattern #replacement
	echo "${1}" | sed -e "s/{{"$2"}}/"${3//\//\\\/}"/g" -e "s/{{\\\\"$2"}}/{{"$2"}}/g"
}

fill_body_templates(){ #1=text
	newtext=$(fill_template "$1" "path" "${path_prefix}")
	newtext=$(fill_template "${newtext}" "now_date" "${now_date_time[0]}")
	fill_template "${newtext}" "now_time" "${now_date_time[1]}"
}

###
#HTML generation

make_card(){
	fill_template "$(fill_body_templates "$card")" file "$1"
}

make_index(){
	fill_body_templates "$doc_preamble" > "index.html"
	for file in "${files[@]}"; do
		make_card "$file" >> "index.html"
	done
	fill_body_templates "$doc_postamble" >> "index.html"
}

###
#recursive step

build(){

	#check for spaces in file/directory names
	spaces=$(ls | awk "/ /")
	err "space detection $spaces \n"
	if [[ $spaces != "" ]]; then
		echo "the following file(s) have spaces in the name, rename them and try again:
	${spaces}"
		exit 1
	fi

	#get files and apply ignore
	err "ignoring: $ignore\n"
	local files=($(ls -p | grep -vF -- "$ignore"))
	err "detected: ${#files[@]}\n"
	if [[ "$protected" = "false" ]]; then
		err "making index\n"
		make_index
	fi
}

###
#recursion

recurse() {
	err "load in $PWD\n"
	#load config
	if test -f ".config"; then #if theres no set config it'll just scope up
		err "load config\n"
		#if unconfigured inherit from parent config
		local card="$(fetch_config "card" "$card")"
		local doc_preamble="$(fetch_config "doc_preamble" "$doc_preamble")"
		local doc_postamble="$(fetch_config "doc_postamble" "$doc_postamble")"
		local protected="$(fetch_config "protected" "false")" #default to unprotected
		local ignore="$(fetch_config "ignore" "$ignore")"
		ignore=$(echo "${ignore:-^\$}" | grep -v "^$") #remove empty lines otherwise grep doesn't filter right
	fi

	build

	err "continue to $(ls -d */ 2>/dev/null| grep -vF -- "$ignore")\n"
	for dir in $(ls -d */ 2>/dev/null| grep -vF -- "$ignore"); do
		local old_path="$path_prefix"
		path_prefix="$path_prefix$dir"
		err "pathprefix $path_prefix"
		cd $dir
		err "recursing to $dir"
		recurse
		cd ..
		path_prefix="$old_path"
	done
}

###
#execution

if [[ $1 = "" ]]; then
	echo "hey you gotta give me a directory"
	exit 1
else
	cd $1
	recurse
	err "bye\n"
fi
